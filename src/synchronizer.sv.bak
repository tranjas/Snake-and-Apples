
module synchronizer (clk, reset, push, sync);
	input logic clk, reset, push;
	output logic sync;
	
	logic flip;
	
	always_ff @(posedge clk) begin 
		if (reset) sync <= 0;
		
		else begin
			flip <= push;
			sync <= flip;
		end
	end
endmodule

module synchronizer_test ();
	logic clk, reset, push;
	logic sync;
	
	synchronizer sync_dut (.clk, .reset, .push, .sync);
	
	parameter CLOCK_PERIOD = 50;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	initial begin
	reset <= 1;					@(posedge clk);   
	reset <= 0;					@(posedge clk); 
									@(posedge clk); 
									@(posedge clk); 
   push  <= 1;					@(posedge clk);
									@(posedge clk); 
									@(posedge clk); 
	push  <= 0;					@(posedge clk); 
									@(posedge clk); 
	end
endmodule