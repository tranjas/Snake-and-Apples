// snakeLight module but set as the head, the starting point of the game
module snakeBase1 (clk, reset, dL, rL, lL, uL, dC, dC2, rC, rC2, lC, lC2, uC, uC2, newD, size, count, count2, greenOn, hit);
	input  logic clk, reset, dL, rL, lL, uL;
	input  reg [1:0] newD;
	input reg [5:0] size, dC, rC, lC, uC;
	input reg [7:0] dC2, rC2, lC2, uC2;
	
	output reg [5:0] count; 
	output reg [7:0] count2;
	output logic greenOn;
	output logic hit;
	
	reg [5:0] tempc;
	reg [7:0] tempc2;
	enum { Out, Current } ns, ps;
	
	always_comb begin
		case (ps) 
			Current: if (count <= size & count2 < 8'b11111111) begin
							ns		  = Current;
							tempc   = count;
							tempc2  = count2 + 8'b00000001;
					   end
						
						else if (count < size & count2 == 8'b11111111) begin
							ns		  = Current;
							tempc   = count + 6'b000001;
							tempc2  = 8'b00000000;
						end
						
						else if (count == size & count2 == 8'b11111111 & (dL & dC == 6'b000001 & dC2 == 8'b11111111 & newD == 2'b00 | rL & rC == 6'b000001 & rC2 == 8'b11111111 & newD == 2'b01 |
																							  lL & lC == 6'b000001 & lC2 == 8'b11111111 & newD == 2'b10 | uL & uC == 6'b000001 & uC2 == 8'b11111111 & newD == 2'b11 ) ) begin
							 ns	  = Current;
							 tempc  = 6'b000001;
							 tempc2 = 8'b00000000;
						end
						
						else begin
							ns 	  = Out;
							tempc   = 6'b000000;
							tempc2  = 8'b00000000;
						end

			Out   : if (dL & dC == 6'b000001 & dC2 == 8'b11111111 & newD == 2'b00 | rL & rC == 6'b000001 & rC2 == 8'b11111111 & newD == 2'b01 |
							lL & lC == 6'b000001 & lC2 == 8'b11111111 & newD == 2'b10 | uL & uC == 6'b000001 & uC2 == 8'b11111111 & newD == 2'b11 ) begin
					      ns 	  = Current;
							tempc   = 6'b000001;
							tempc2  = 8'b00000000;
					  end
					  
					  else begin
							ns		  = Out;
							tempc   = 6'b000000;
							tempc2  = 8'b00000000;
					  end
		endcase
	end
	
	always_ff @ (posedge clk) begin
		if (reset) begin
			ps 	<= Current;
			count <= size - 6'b000010;
			count2<= 8'b00000000;
		end
		
		else begin
			ps		<= ns;
			count <= tempc;
			count2<= tempc2;
		end
	end
	
	assign greenOn = (ps == Current);
	assign hit		= (count == 6'b000001 & count2 == 8'b11111111 & (dL & newD == 2'b11 | rL & newD == 2'b10 |lL & newD == 2'b01 | uL & newD == 2'b00));
	
endmodule

// first segment of starting snake after the head
module snakeBase2 (clk, reset, dL, rL, lL, uL, dC, dC2, rC, rC2, lC, lC2, uC, uC2, newD, size, count, count2, greenOn, hit);
	input  logic clk, reset, dL, rL, lL, uL;
	input  reg [1:0] newD;
	input reg [5:0] size, dC, rC, lC, uC;
	input reg [7:0] dC2, rC2, lC2, uC2;
	
	output reg [5:0] count; 
	output reg [7:0] count2;
	output logic greenOn;
	output logic hit;
	
	reg [5:0] tempc;
	reg [7:0] tempc2;
	enum { Out, Current } ns, ps;
	
	always_comb begin
		case (ps) 
			Current: if (count <= size & count2 < 8'b11111111) begin
							ns		  = Current;
							tempc   = count;
							tempc2  = count2 + 8'b00000001;
					   end
						
						else if (count < size & count2 == 8'b11111111) begin
							ns		  = Current;
							tempc   = count + 6'b000001;
							tempc2  = 8'b00000000;
						end
						
						else if (count == size & count2 == 8'b11111111 & (dL & dC == 6'b000001 & dC2 == 8'b11111111 & newD == 2'b00 | rL & rC == 6'b000001 & rC2 == 8'b11111111 & newD == 2'b01 |
																							  lL & lC == 6'b000001 & lC2 == 8'b11111111 & newD == 2'b10 | uL & uC == 6'b000001 & uC2 == 8'b11111111 & newD == 2'b11 ) ) begin
							 ns	  = Current;
							 tempc  = 6'b000001;
							 tempc2 = 8'b00000000;
						end
						
						else begin
							ns 	  = Out;
							tempc   = 6'b000000;
							tempc2  = 8'b00000000;
						end

			Out   : if (dL & dC == 6'b000001 & dC2 == 8'b11111111 & newD == 2'b00 | rL & rC == 6'b000001 & rC2 == 8'b11111111 & newD == 2'b01 |
							lL & lC == 6'b000001 & lC2 == 8'b11111111 & newD == 2'b10 | uL & uC == 6'b000001 & uC2 == 8'b11111111 & newD == 2'b11 ) begin
					      ns 	  = Current;
							tempc   = 6'b000001;
							tempc2  = 8'b00000000;
					  end
					  
					  else begin
							ns		  = Out;
							tempc   = 6'b000000;
							tempc2  = 8'b00000000;
					  end
		endcase
	end
	
	always_ff @ (posedge clk) begin
		if (reset) begin
			ps 	<= Current;
			count <= size - 6'b000001;
			count2<= 8'b00000000;
		end
		
		else begin
			ps		<= ns;
			count <= tempc;
			count2<= tempc2;
		end
	end
	
	assign greenOn = (ps == Current);
	assign hit		= (count == 6'b000001 & count2 == 8'b11111111 & (dL & newD == 2'b11 | rL & newD == 2'b10 |lL & newD == 2'b01 | uL & newD == 2'b00));
	
endmodule

// last segment of the starting snake
module snakeBase3 (clk, reset, dL, rL, lL, uL, dC, dC2, rC, rC2, lC, lC2, uC, uC2, newD, size, count, count2, greenOn, hit);
	input  logic clk, reset, dL, rL, lL, uL;
	input  reg [1:0] newD;
	input reg [5:0] size, dC, rC, lC, uC;
	input reg [7:0] dC2, rC2, lC2, uC2;
	
	output reg [5:0] count; 
	output reg [7:0] count2;
	output logic greenOn;
	output logic hit;
	
	reg [5:0] tempc;
	reg [7:0] tempc2;
	enum { Out, Current } ns, ps;
	
	always_comb begin
		case (ps) 
			Current: if (count <= size & count2 < 8'b11111111) begin
							ns		  = Current;
							tempc   = count;
							tempc2  = count2 + 8'b00000001;
					   end
						
						else if (count < size & count2 == 8'b11111111) begin
							ns		  = Current;
							tempc   = count + 6'b000001;
							tempc2  = 8'b00000000;
						end
						
						else if (count == size & count2 == 8'b11111111 & (dL & dC == 6'b000001 & dC2 == 8'b11111111 & newD == 2'b00 | rL & rC == 6'b000001 & rC2 == 8'b11111111 & newD == 2'b01 |
																							  lL & lC == 6'b000001 & lC2 == 8'b11111111 & newD == 2'b10 | uL & uC == 6'b000001 & uC2 == 8'b11111111 & newD == 2'b11 ) ) begin
							 ns	  = Current;
							 tempc  = 6'b000001;
							 tempc2 = 8'b00000000;
						end
						
						else begin
							ns 	  = Out;
							tempc   = 6'b000000;
							tempc2  = 8'b00000000;
						end
						
			Out   : if (dL & dC == 6'b000001 & dC2 == 8'b11111111 & newD == 2'b00 | rL & rC == 6'b000001 & rC2 == 8'b11111111 & newD == 2'b01 |
							lL & lC == 6'b000001 & lC2 == 8'b11111111 & newD == 2'b10 | uL & uC == 6'b000001 & uC2 == 8'b11111111 & newD == 2'b11 ) begin
					      ns 	  = Current;
							tempc   = 6'b000001;
							tempc2  = 8'b00000000;
					  end
					  
					  else begin
							ns		  = Out;
							tempc   = 6'b000000;
							tempc2  = 8'b00000000;
					  end
		endcase
	end
	
	always_ff @ (posedge clk) begin
		if (reset) begin
			ps 	<= Current;
			count <= size;
			count2<= 8'b00000000;
		end
		
		else begin
			ps		<= ns;
			count <= tempc;
			count2<= tempc2;
		end
	end
	
	assign greenOn = (ps == Current);
	assign hit		= (count == 6'b000001 & count2 == 8'b11111111 & (dL & newD == 2'b11 | rL & newD == 2'b10 |lL & newD == 2'b01 | uL & newD == 2'b00));
	
endmodule
						 


module snakeBase1_test ();
	logic clk, reset, dL, rL, lL, uL;
	reg [1:0] newD;
	reg [5:0] size, dC, rC, lC, uC;
	reg [7:0] dC2, rC2, lC2, uC2;
	reg [5:0] count;
	reg [7:0] count2;
	logic greenOn;
	
	snakeBase1 SB1dut (.clk, .reset, .dL, .rL, .lL, .uL, .dC, .dC2, .rC, .rC2, .lC, .lC2, .uC, .uC2, .newD, .size, .count, .count2, .greenOn);
	
	parameter CLOCK_PERIOD = 50;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	initial begin
																	@(posedge clk);   
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; dC <= 0; rC <= 0; lC <= 0; uC <= 0; @(posedge clk);
		lL 	<= 1; newD <= 2;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		lL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		dL 	<= 1; newD <= 0;	size <= 3;				@(posedge clk);
						newD <= 3;								@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		dL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		rL 	<= 1; newD <= 1;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		rL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		uL 	<= 1; newD <= 3;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);

	end
endmodule

module snakeBase2_test ();
	logic clk, reset, dL, rL, lL, uL;
	reg [1:0] newD;
	reg [5:0] size, dC, rC, lC, uC;
	reg [7:0] dC2, rC2, lC2, uC2;
	reg [5:0] count;
	reg [7:0] count2;
	logic greenOn;

	snakeBase2 SB2dut (.clk, .reset, .dL, .rL, .lL, .uL, .dC, .dC2, .rC, .rC2, .lC, .lC2, .uC, .uC2, .newD, .size, .count, .count2, .greenOn);
	
	parameter CLOCK_PERIOD = 50;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	initial begin
																	@(posedge clk);   
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; dC <= 0; rC <= 0; lC <= 0; uC <= 0; @(posedge clk);
		lL 	<= 1; newD <= 2;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		lL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		dL 	<= 1; newD <= 0;	size <= 3;				@(posedge clk);
						newD <= 3;								@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		dL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		rL 	<= 1; newD <= 1;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		rL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		uL 	<= 1; newD <= 3;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		uL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;												@(posedge clk);
		reset <= 0;												@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);

	end
endmodule

module snakeBase3_test ();
	logic clk, reset, dL, rL, lL, uL;
	reg [1:0] newD;
	reg [5:0] size, dC, rC, lC, uC;
	reg [7:0] dC2, rC2, lC2, uC2;
	reg [5:0] count;
	reg [7:0] count2;
	logic greenOn;
	
	snakeBase3 SB3dut (.clk, .reset, .dL, .rL, .lL, .uL, .dC, .dC2, .rC, .rC2, .lC, .lC2, .uC, .uC2, .newD, .size, .count, .count2, .greenOn);
	
	parameter CLOCK_PERIOD = 50;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	initial begin
																	@(posedge clk);   
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; dC <= 0; rC <= 0; lC <= 0; uC <= 0; @(posedge clk);
		lL 	<= 1; newD <= 2;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		lL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		dL 	<= 1; newD <= 0;	size <= 3;				@(posedge clk);
						newD <= 3;								@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		dL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		rL 	<= 1; newD <= 1;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		rL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;          				 				@(posedge clk);
		reset <= 0; 											@(posedge clk);
		uL 	<= 1; newD <= 3;	size <= 3;				@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);
		uL		<= 0;												@(posedge clk);
																	@(posedge clk);
		reset <= 1;												@(posedge clk);
		reset <= 0;												@(posedge clk);
																	@(posedge clk);
																	@(posedge clk);

	end
endmodule